"""
Test data loading script for VoltMetrics.

This script loads synthetic test data generated by test_data_generator
into the PostgreSQL database.
"""

import json
import logging
from datetime import datetime
from sqlalchemy.orm import Session

from db.database import SessionLocal
from db.init_db import init_db
from models.facility import Facility
from models.equipment import Equipment, EquipmentType
from models.maintenance import MaintenanceRecord
from utils.test_data_generator import TestDataGenerator

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def parse_iso_datetime(dt_str):
    """Parse ISO format datetime string to datetime object."""
    return datetime.fromisoformat(dt_str)


def load_test_data_from_file(db: Session, filename: str):
    """
    Load test data from a JSON file into the database.
    
    Args:
        db: SQLAlchemy database session
        filename: Path to the JSON file containing test data
    """
    logger.info(f"Loading test data from {filename}...")
    
    with open(filename, 'r') as f:
        data = json.load(f)
    
    # Load facilities
    facility_count = 0
    for facility_data in data['facilities']:
        # Convert coordinates to JSON-compatible format
        if 'coordinates' in facility_data:
            coords = facility_data['coordinates']
        else:
            coords = {"lat": 0.0, "lng": 0.0}
        
        facility = Facility(
            id=facility_data['id'],
            name=facility_data['name'],
            location=facility_data['location'],
            coordinates=coords,
            year_built=facility_data['year_built'],
            size_sqft=facility_data['size_sqft'],
            building_type=facility_data['building_type'],
            environment=facility_data['environment']
        )
        
        db.add(facility)
        facility_count += 1
    
    # Commit facilities to get IDs for equipment
    db.commit()
    logger.info(f"Loaded {facility_count} facilities")
    
    # Load equipment
    equipment_count = 0
    for equipment_data in data['equipment']:
        # Handle enum conversion
        equipment_type = EquipmentType[equipment_data['type']]
        
        # Parse datetime strings
        installation_date = parse_iso_datetime(equipment_data['installation_date'])
        last_maintenance_date = None
        if 'last_maintenance_date' in equipment_data:
            last_maintenance_date = parse_iso_datetime(equipment_data['last_maintenance_date'])
        
        # Create equipment object
        equipment = Equipment(
            id=equipment_data['id'],
            name=equipment_data['name'],
            type=equipment_type,
            facility_id=equipment_data['location'].split(' - ')[0],  # Extract facility ID from location
            installation_date=installation_date,
            location=equipment_data['location'],
            manufacturer=equipment_data['manufacturer'],
            model=equipment_data['model'],
            is_aluminum_conductor=equipment_data['is_aluminum_conductor'],
            humidity_exposure=equipment_data['humidity_exposure'],
            temperature_exposure=equipment_data['temperature_exposure'],
            loading_percentage=equipment_data['loading_percentage'],
            last_maintenance_date=last_maintenance_date,
            additional_data=equipment_data.get('additional_data')
        )
        
        db.add(equipment)
        equipment_count += 1
    
    # Commit equipment to get IDs for maintenance records
    db.commit()
    logger.info(f"Loaded {equipment_count} equipment items")
    
    # Load maintenance records
    maintenance_count = 0
    for record_data in data['maintenance_records']:
        # Parse datetime
        maintenance_date = parse_iso_datetime(record_data['date'])
        
        # Create maintenance record
        record = MaintenanceRecord(
            id=record_data['id'],
            equipment_id=record_data['equipment_id'],
            date=maintenance_date,
            type=record_data['type'],
            technician=record_data['technician'],
            findings=record_data['findings']
        )
        
        db.add(record)
        maintenance_count += 1
    
    # Final commit
    db.commit()
    logger.info(f"Loaded {maintenance_count} maintenance records")
    logger.info("Test data loading complete!")


def generate_and_load_test_data(db: Session, seed: int = 42):
    """
    Generate test data and load it directly into the database.
    
    Args:
        db: SQLAlchemy database session
        seed: Random seed for data generation
    """
    logger.info("Generating test data...")
    generator = TestDataGenerator(seed=seed)
    dataset = generator.generate_full_dataset()
    
    # Load facilities
    facility_count = 0
    for facility_data in dataset['facilities']:
        facility = Facility(
            id=facility_data['id'],
            name=facility_data['name'],
            location=facility_data['location'],
            coordinates=facility_data['coordinates'],
            year_built=facility_data['year_built'],
            size_sqft=facility_data['size_sqft'],
            building_type=facility_data['building_type'],
            environment=facility_data['environment']
        )
        
        db.add(facility)
        facility_count += 1
    
    # Commit facilities to get IDs for equipment
    db.commit()
    logger.info(f"Generated and loaded {facility_count} facilities")
    
    # Load equipment
    equipment_count = 0
    for equipment_data in dataset['equipment']:
        # Handle enum conversion
        equipment_type = EquipmentType[equipment_data['type']]
        
        # Parse datetime strings
        installation_date = parse_iso_datetime(equipment_data['installation_date'])
        last_maintenance_date = None
        if 'last_maintenance_date' in equipment_data:
            last_maintenance_date = parse_iso_datetime(equipment_data['last_maintenance_date'])
        
        # Create equipment object
        equipment = Equipment(
            id=equipment_data['id'],
            name=equipment_data['name'],
            type=equipment_type,
            facility_id=equipment_data['location'].split(' - ')[0],  # Extract facility ID from location
            installation_date=installation_date,
            location=equipment_data['location'],
            manufacturer=equipment_data['manufacturer'],
            model=equipment_data['model'],
            is_aluminum_conductor=equipment_data['is_aluminum_conductor'],
            humidity_exposure=equipment_data['humidity_exposure'],
            temperature_exposure=equipment_data['temperature_exposure'],
            loading_percentage=equipment_data['loading_percentage'],
            last_maintenance_date=last_maintenance_date,
            additional_data=equipment_data.get('additional_data')
        )
        
        db.add(equipment)
        equipment_count += 1
    
    # Commit equipment to get IDs for maintenance records
    db.commit()
    logger.info(f"Generated and loaded {equipment_count} equipment items")
    
    # Load maintenance records
    maintenance_count = 0
    for record_data in dataset['maintenance_records']:
        # Parse datetime
        maintenance_date = parse_iso_datetime(record_data['date'])
        
        # Create maintenance record
        record = MaintenanceRecord(
            id=record_data['id'],
            equipment_id=record_data['equipment_id'],
            date=maintenance_date,
            type=record_data['type'],
            technician=record_data['technician'],
            findings=record_data['findings']
        )
        
        db.add(record)
        maintenance_count += 1
    
    # Final commit
    db.commit()
    logger.info(f"Generated and loaded {maintenance_count} maintenance records")
    logger.info("Test data generation and loading complete!")


if __name__ == "__main__":
    # Initialize the database first
    init_db()
    
    # Create a database session
    db = SessionLocal()
    try:
        # Generate and load test data directly
        generate_and_load_test_data(db)
        
        # Alternatively, load from a file if it exists
        # load_test_data_from_file(db, "test_data.json")
    finally:
        db.close() 